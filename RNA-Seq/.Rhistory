embryo_cov <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/embryo/Y_cov.txt",header=FALSE) %>% rename(position=V1)
mean.cov.df$em_coverage <- unlist(lapply(mean.cov.df$relative_pos,embryo_cov))
ave_cov_em <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),embryo_cov,by="position") -> temp.df
return(mean(temp.df$V2))
}
mean.cov.df$em_coverage <- unlist(lapply(mean.cov.df$relative_pos,embryo_cov))
embryo_cov <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/embryo/Y_cov.txt",header=FALSE) %>% rename(position=V1)
ave_cov_em <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),embryo_cov,by="position") -> temp.df
return(mean(temp.df$V2))
}
mean.cov.df$em_coverage <- unlist(lapply(mean.cov.df$relative_pos,embryo_cov))
mean.cov.df$em_coverage <- unlist(lapply(mean.cov.df$relative_pos,ave_cov_em))
ggplot(mean.cov.df,aes(x=relative_pos,y=em_coverage)) + geom_point()
library(dplyr)
library(tidyverse)
library(ggplot2)
cov.df <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/Kc_cell/kc_depth_W.txt",header=FALSE) %>% rename(position=V1)
cov.df
insertion_sites <- read.table("/Users/apd20500/Desktop/hobo_project/insertion_site/Wstartingpoint_insertsite.txt",header=FALSE)
insertion_sites
dplyr::pull(insertion_sites,V1) -> sites
ave_cov <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),cov.df,by="position") -> temp.df
return(mean(temp.df$V2))
}
ave_cov(100)
left_join(data.frame(position=sites+2),cov.df,by="position") -> f1
f1
mean(f1$V2)
mean.cov.df <- data.frame(relative_pos=-100:100)
mean.cov.df$coverage <- unlist(lapply(mean.cov.df$relative_pos,ave_cov))
mean.cov.df
ggplot(mean.cov.df,aes(x=relative_pos,y=coverage)) + geom_point()
embryo_cov <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/embryo/W_cov.txt",header=FALSE) %>% rename(position=V1)
ave_cov_em <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),embryo_cov,by="position") -> temp.df
return(mean(temp.df$V2))
}
mean.cov.df$em_coverage <- unlist(lapply(mean.cov.df$relative_pos,ave_cov_em))
ggplot(mean.cov.df,aes(x=relative_pos,y=em_coverage)) + geom_point()
library(dplyr)
library(Gviz)
library(tidyverse)
library(biomaRt)
library(ggplot2)
insert_loc <- as_tibble(read.csv("~/Desktop/hobo_project/insertion_site/Wstartingpoint_insertsite.txt", sep="",header=F))
min_loc <- min(insert_loc$V1)
max_loc <- max(insert_loc$V1)
min_loc
max_loc
options(ucscChromosomeNames=FALSE)
options(ucscChromosomeNames=FALSE)
gene.ensembl <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset="dmelanogaster_gene_ensembl")
genes.region <- biomaRt::getBM(
attributes = c('chromosome_name','transcript_length','strand','gene_biotype',
'ensembl_gene_id','ensembl_exon_id','ensembl_transcript_id','external_gene_name','exon_chrom_start', 'exon_chrom_start','exon_chrom_end'),
filters = 'chromosome_name',
#apply filter for selected chromosome and region
values = '2R',
mart = gene.ensembl)
genes.region <- genes.region %>%
dplyr::rename(
rstarts = exon_chrom_start,
chromosome = chromosome_name,
start = exon_chrom_start,
end = exon_chrom_end,
width = transcript_length,
gene = ensembl_gene_id,
feature = gene_biotype,
exon = ensembl_exon_id,
transcript = ensembl_transcript_id,
symbol = external_gene_name
)
genes.region$strand[as.character(genes.region$strand)=="-1"] <- "-"
genes.region$strand[as.character(genes.region$strand)=="1"] <- "+"
#switch to correct chrname
for (i in 1:nrow(genes.region)){
genes.region[i,1]=paste0("chr",genes.region[i,1])
}
insert_track <- AnnotationTrack(name="Insertion Sites", genome="dm6",
chromosome="chr2R",
start=insert_loc$V1, end=insert_loc$V1,
showTitle=TRUE,cex.title=0.5,
shape="box",stacking="dense")
new_gene_track <- GeneRegionTrack(genes.region, genome="dm6",name="Transcripts Models",fontsize.group=8,from=min_loc,to=max_loc)
axisTrack <- GenomeAxisTrack()
ideoTrack <- IdeogramTrack(genome = "dm6",chromosome="chr2R",from=min_loc-5e3,to=max_loc)
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track),
from=min_loc-1e3,to=min_loc+3e4,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol"
)
#red <- as_tibble(read.table("~/Desktop/hobo_project/R_plot/kc_cells/Kc_red.txt"))
#red <- red %>% filter(grepl(pattern="2R",x=V2))
#class(red)
get_chr <- function(flybase_loc){
chr_num <- unlist(str_split(flybase_loc,":"))[1]
chr <- paste0("chr",chr_num)
return(chr)
}
get_start <- function(flybase_loc){
coordinate <- unlist(str_split(flybase_loc,":"))[2] %>% str_split("\\.\\.") %>% unlist()
return(coordinate[1])
}
get_end <- function(flybase_loc){
coordinate <- unlist(str_split(flybase_loc,":"))[2] %>% str_split("\\.\\.") %>% unlist
return(coordinate[2])
}
#red$chr <- unlist(lapply(red$V2,get_chr))
#red$start <- unlist(lapply(red$V2,get_start))
#red$end <- unlist(lapply(red$V2,get_end))
#red_tidied <- red[,c("chr","start","end")]
#write.table(red_tidied,"~/Desktop/hobo_project/R_plot/kc_cells/2R_red_bed.txt",sep="\t",col.names=FALSE,row.names = FALSE,quote=FALSE)
#black <- as_tibble(read.table("~/Desktop/hobo_project/R_plot/kc_cells/Kc_black.txt"))
#black <- black %>% filter(grepl(pattern="2R",x=V2))
#black$chr <- unlist(lapply(black$V2,get_chr))
#black$start <- unlist(lapply(black$V2,get_start))
#black$end <- unlist(lapply(black$V2,get_end))
#black_tidied <- black[,c("chr","start","end")]
#write.table(black_tidied,"~/Desktop/hobo_project/R_plot/kc_cells/2R_black_bed.txt",sep="\t",col.names=FALSE,row.names = FALSE,quote=FALSE)
#blue <- as_tibble(read.table("~/Desktop/hobo_project/R_plot/kc_cells/Kc_blue.txt"))
#blue <- blue %>% filter(grepl(pattern="2R",x=V2))
#blue$chr <- unlist(lapply(blue$V2,get_chr))
#blue$start <- unlist(lapply(blue$V2,get_start))
#blue$end <- unlist(lapply(blue$V2,get_end))
#blue_tidied <- blue[,c("chr","start","end")]
#write.table(blue_tidied,"~/Desktop/hobo_project/R_plot/kc_cells/2R_blue_bed.txt",sep="\t",col.names=FALSE,row.names = FALSE,quote=FALSE)
#green <- as_tibble(read.table("~/Desktop/hobo_project/R_plot/kc_cells/Kc_green.txt"))
#green <- green %>% filter(grepl(pattern="2R",x=V2))
#green$chr <- unlist(lapply(green$V2,get_chr))
#green$start <- unlist(lapply(green$V2,get_start))
#green$end <- unlist(lapply(green$V2,get_end))
#green_tidied <- green[,c("chr","start","end")]
#write.table(green_tidied,"~/Desktop/hobo_project/R_plot/kc_cells/2R_green_bed.txt",sep="\t",col.names=FALSE,row.names = FALSE,quote=FALSE)
#yellow <- as_tibble(read.table("~/Desktop/hobo_project/R_plot/kc_cells/Kc_yellow.txt"))
#yellow <- yellow %>% filter(grepl(pattern="2R",x=V2))
#yellow$chr <- unlist(lapply(yellow$V2,get_chr))
#yellow$start <- unlist(lapply(yellow$V2,get_start))
#yellow$end <- unlist(lapply(yellow$V2,get_end))
#yellow_tidied <- yellow[,c("chr","start","end")]
#write.table(yellow_tidied,"~/Desktop/hobo_project/R_plot/kc_cells/2R_yellow_bed.txt",sep="\t",col.names=FALSE,row.names = FALSE,quote=FALSE)
red_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_red_bed.txt",header=FALSE)
yellow_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_yellow_bed.txt",header=FALSE)
green_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_green_bed.txt",header=FALSE)
blue_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_blue_bed.txt",header=FALSE)
black_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_black_bed.txt",header=FALSE)
r1 <- mutate(red_tidied,State="red")
y1 <-mutate(yellow_tidied,State="yellow")
g1 <- mutate(green_tidied,State="green")
b1 <-mutate(blue_tidied,State="blue")
b2 <-mutate(black_tidied,State="black")
chr.state.df <- rbind(r1,y1) %>% rbind(g1) %>% rbind(b1) %>% rbind(b2)
chr.state.df <- chr.state.df %>% dplyr::rename(
start=V2,
end=V3
)
chrstate_track <- AnnotationTrack(chromosome="chr2R",genome="dm6",
start=chr.state.df$start,
end=chr.state.df$end,
name="active chromatin",
feature=chr.state.df$State,
stacking="dense",
yellow="yellow",
red="red",
green="green",
black="black",
blue="blue")
plotTracks(chrstate_track,from=min_loc-1e3,to=min_loc+3e4,chromosome="chr2R")
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track,chrstate_track),
from=min_loc-1e3,to=max_loc,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol")
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track,chrstate_track),
from=min_loc-1e3,to=max_loc,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol")
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track,chrstate_track),
from=min_loc-1e3,to=min_loc+6e4,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol")
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track,chrstate_track),
from=min_loc-1e3,to=min_loc+5e4,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol")
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track,chrstate_track),
from=min_loc-1e3,to=min_loc+5e4,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol")
insert_loc <- as_tibble(read.csv("~/Desktop/hobo_project/insertion_site/Ystartingpoint_insertsite.txt", sep="",header=F))
min_loc <- min(insert_loc$V1)
max_loc <- max(insert_loc$V1)
min_loc-2e2
max_loc+2e2
insert_track <- AnnotationTrack(name="Insertion Sites", genome="dm6",
chromosome="chr2R",
start=insert_loc$V1, end=insert_loc$V1,
showTitle=TRUE,cex.title=0.5,
shape="box",stacking="dense")
new_gene_track <- GeneRegionTrack(genes.region, genome="dm6",name="Transcripts Models",fontsize.group=8,from=min_loc,to=max_loc)
axisTrack <- GenomeAxisTrack()
ideoTrack <- IdeogramTrack(genome = "dm6",chromosome="chr2R",from=min_loc-5e3,to=max_loc)
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track),
from=min_loc-1e3,to=min_loc+3e4,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol"
)
get_chr <- function(flybase_loc){
chr_num <- unlist(str_split(flybase_loc,":"))[1]
chr <- paste0("chr",chr_num)
return(chr)
}
get_start <- function(flybase_loc){
coordinate <- unlist(str_split(flybase_loc,":"))[2] %>% str_split("\\.\\.") %>% unlist()
return(coordinate[1])
}
get_end <- function(flybase_loc){
coordinate <- unlist(str_split(flybase_loc,":"))[2] %>% str_split("\\.\\.") %>% unlist
return(coordinate[2])
}
red_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_red_bed.txt",header=FALSE)
yellow_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_yellow_bed.txt",header=FALSE)
green_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_green_bed.txt",header=FALSE)
blue_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_blue_bed.txt",header=FALSE)
black_tidied<- read.table("~/Desktop/hobo_project/R_plot/kc_cells/2R_black_bed.txt",header=FALSE)
r1 <- mutate(red_tidied,State="red")
y1 <-mutate(yellow_tidied,State="yellow")
g1 <- mutate(green_tidied,State="green")
b1 <-mutate(blue_tidied,State="blue")
b2 <-mutate(black_tidied,State="black")
chr.state.df <- rbind(r1,y1) %>% rbind(g1) %>% rbind(b1) %>% rbind(b2)
chr.state.df <- chr.state.df %>% dplyr::rename(
start=V2,
end=V3
)
chrstate_track <- AnnotationTrack(chromosome="chr2R",genome="dm6",
start=chr.state.df$start,
end=chr.state.df$end,
name="active chromatin",
feature=chr.state.df$State,
stacking="dense",
yellow="yellow",
red="red",
green="green",
black="black",
blue="blue")
plotTracks(chrstate_track,from=min_loc-1e3,to=min_loc+3e4,chromosome="chr2R")
plotTracks(list(ideoTrack,axisTrack,new_gene_track,insert_track,chrstate_track),
from=min_loc-1e3,to=min_loc+5e4,
collapseTranscripts = "longest"
,transcriptAnnotation = "symbol")
BG3_track <- AnnotationTrack(chromosome="chr2R",genome="dm6",
start=BG3.df$start,
end=BG3.df$end,
name="active chromatin",
feature=BG3.df$State,
stacking="dense",
"1"="red",
"2"="pink",
"3"="brown",
"4"="orange",
"5"="green",
"6"="black",
"7"="blue",
"8"="cyan",
"9"="grey")
S2_track <- AnnotationTrack(chromosome="chr2R",genome="dm6",
start=S2.df$start,
end=S2.df$end,
name="active chromatin",
feature=S2.df$State,
stacking="dense",
"1"="red",
"2"="pink",
"3"="brown",
"4"="orange",
"5"="green",
"6"="black",
"7"="blue",
"8"="cyan",
"9"="grey")
cov.df <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/Kc_cell/kc_depth_W.txt",header=FALSE) %>% rename(position=V1)
cov.df
insertion_sites <- read.table("/Users/apd20500/Desktop/hobo_project/insertion_site/Wstartingpoint_insertsite.txt",header=FALSE)
insertion_sites
dplyr::pull(insertion_sites,V1) -> sites
ave_cov <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),cov.df,by="position") -> temp.df
return(mean(temp.df$V2))
}
ave_cov(100)
mean.cov.df <- data.frame(relative_pos=-100:100)
mean.cov.df$coverage <- unlist(lapply(mean.cov.df$relative_pos,ave_cov))
mean.cov.df
ggplot(mean.cov.df,aes(x=relative_pos,y=coverage)) + geom_point() + ylim(0,)
ggplot(mean.cov.df,aes(x=relative_pos,y=coverage)) + geom_point() + ylim(0,20)
ggplot(mean.cov.df,aes(x=relative_pos,y=coverage)) + geom_point() + ylim(0,15)
embryo_cov <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/embryo/W_cov.txt",header=FALSE) %>% rename(position=V1)
ave_cov_em <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),embryo_cov,by="position") -> temp.df
return(mean(temp.df$V2))
}
mean.cov.df$em_coverage <- unlist(lapply(mean.cov.df$relative_pos,ave_cov_em))
ggplot(mean.cov.df,aes(x=relative_pos,y=em_coverage)) + geom_point() + ylim(0,65)
cov.df <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/Kc_cell/kc_depth_Y.txt",header=FALSE) %>% rename(position=V1)
cov.df
insertion_sites <- read.table("/Users/apd20500/Desktop/hobo_project/insertion_site/Ystartingpoint_insertsite.txt",header=FALSE)
insertion_sites
dplyr::pull(insertion_sites,V1) -> sites
ave_cov <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),cov.df,by="position") -> temp.df
return(mean(temp.df$V2))
}
ave_cov(100)
mean.cov.df <- data.frame(relative_pos=-100:100)
mean.cov.df$coverage <- unlist(lapply(mean.cov.df$relative_pos,ave_cov))
mean.cov.df
ggplot(mean.cov.df,aes(x=relative_pos,y=coverage)) + geom_point() + ylim(0,10)
ggplot(mean.cov.df,aes(x=relative_pos,y=coverage)) + geom_point() + ylim(0,8)
ggplot(mean.cov.df,aes(x=relative_pos,y=em_coverage)) + geom_point() + ylim(0,85)
embryo_cov <- read.table("/Users/apd20500/Desktop/hobo_project/dnase/embryo/Y_cov.txt",header=FALSE) %>% rename(position=V1)
ave_cov_em <- function(relative_pos){
left_join(data.frame(position=sites+relative_pos),embryo_cov,by="position") -> temp.df
return(mean(temp.df$V2))
}
mean.cov.df$em_coverage <- unlist(lapply(mean.cov.df$relative_pos,ave_cov_em))
ggplot(mean.cov.df,aes(x=relative_pos,y=em_coverage)) + geom_point() + ylim(0,85)
library(limma)
library(edgeR)
#file path
files <- c("GSM1545535_10_6_5_11.txt",
"GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt",
"GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt",
"GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt",
"GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
path=paste0("./data/",files)
#read and merge set of files containing count data
x <- readDGE(path, columns=c(1,3))
#View(x$counts)
#View(x$samples)
#if already in a single file, import in R, convert to DGEList-object using DGEList function
#keep part of col names for simplicity. substring(string, start,end)
colnames(x) <- substring(colnames(x), 19, nchar(colnames(x)))
#sample info (group)
x$samples$group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP", "Basal", "ML", "LP"))
#batch info
x$samples$lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
library(Mus.musculus)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
#convert raw counts to CPM and log-CPM
cpm <- cpm(x)
#perform on x$counts df
#lib.size in samples df calculated by taking sum of all counts in a sample
#cpm=count per genes*e6/lib.size -> normalize count for each gene according to that sample's total count
lcpm <- cpm(x,log=TRUE)
#lcpm = log2(cpm + 2/ave.lib.size.in.million)
?readDGE
type(x)
x
files <- c("GSM1545535_10_6_5_11.txt",
"GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt",
"GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt",
"GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt",
"GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
path=paste0("./data/",files)
#readDGE - edgeR
#read and merge set of files containing count data
x <- readDGE(path, columns=c(1,3))
#View(x$counts)
#View(x$samples)
#if already in a single file, import in R, convert to DGEList-object using DGEList function
#keep part of col names for simplicity. substring(string, start,end)
colnames(x) <- substring(colnames(x), 19, nchar(colnames(x)))
#sample info (group)
x$samples$group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP", "Basal", "ML", "LP"))
#batch info
x$samples$lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
library(Mus.musculus)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
#convert raw counts to CPM and log-CPM
cpm <- cpm(x)
#perform on x$counts df
#lib.size in samples df calculated by taking sum of all counts in a sample
#cpm=count per genes*e6/lib.size -> normalize count for each gene according to that sample's total count
lcpm <- cpm(x,log=TRUE)
#lcpm = log2(cpm + 2/ave.lib.size.in.million)
getwd()
setwd("/Users/apd20500/Desktop/GIT/redo-paper-analysis/RNA-Seq")
files <- c("GSM1545535_10_6_5_11.txt",
"GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt",
"GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt",
"GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt",
"GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
path=paste0("./data/",files)
#readDGE - edgeR
#read and merge set of files containing count data
x <- readDGE(path, columns=c(1,3))
#View(x$counts)
#View(x$samples)
#if already in a single file, import in R, convert to DGEList-object using DGEList function
#keep part of col names for simplicity. substring(string, start,end)
colnames(x) <- substring(colnames(x), 19, nchar(colnames(x)))
#sample info (group)
x$samples$group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP", "Basal", "ML", "LP"))
#batch info
x$samples$lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
library(Mus.musculus)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
#convert raw counts to CPM and log-CPM
cpm <- cpm(x)
#perform on x$counts df
#lib.size in samples df calculated by taking sum of all counts in a sample
#cpm=count per genes*e6/lib.size -> normalize count for each gene according to that sample's total count
lcpm <- cpm(x,log=TRUE)
#lcpm = log2(cpm + 2/ave.lib.size.in.million)
type(x)
class(x)
View(x$samples)
View(x$counts)
#filter lowly expressed genes
?filterByExpr
#filter lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
keep.exprs
#filter lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
#filter lowly expressed genes
keep.exprs <- filterByExpr(x, group=group)
#filter lowly expressed genes
keep.exprs <- filterByExpr(x)
#filter lowly expressed genes
keep.exprs <- filterByExpr(x,group=group)
#filter lowly expressed genes
keep.exprs <- filterByExpr(x)
keep.exprs
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
View(keep.exprs)
#normalization factors of each sample
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
?calcNormFactors
#starting with matrix count
library(limma)
library(edgeR)
#file path
files <- c("GSM1545535_10_6_5_11.txt",
"GSM1545536_9_6_5_11.txt",
"GSM1545538_purep53.txt",
"GSM1545539_JMS8-2.txt",
"GSM1545540_JMS8-3.txt",
"GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt",
"GSM1545544_JMS9-P7c.txt",
"GSM1545545_JMS9-P8c.txt")
path=paste0("./data/",files)
#readDGE - edgeR
#read and merge set of files containing count data
x <- readDGE(path, columns=c(1,3))
#View(x$counts)
#View(x$samples)
#if already in a single file, import in R, convert to DGEList-object using DGEList function
#keep part of col names for simplicity. substring(string, start,end)
colnames(x) <- substring(colnames(x), 19, nchar(colnames(x)))
#sample info (group)
x$samples$group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP", "Basal", "ML", "LP"))
#batch info
x$samples$lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
library(Mus.musculus)
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
#convert raw counts to CPM and log-CPM
cpm <- cpm(x)
#perform on x$counts df
#lib.size in samples df calculated by taking sum of all counts in a sample
#cpm=count per genes*e6/lib.size -> normalize count for each gene according to that sample's total count
lcpm <- cpm(x,log=TRUE)
#lcpm = log2(cpm + 2/ave.lib.size.in.million)
#filter lowly expressed genes
keep.exprs <- filterByExpr(x) #output table with boolean val for eahc gene, threshold: CPM = 10/ave.lib.size
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
#normalization factors of each sample
x <- calcNormFactors(x, method = "TMM")
#limma package
#MDS plot
